ggplot(data=asset_data) + geom_line(aes(x=Date,y=Close))
ggplot(data=asset_data) + geom_line(aes(x=Date,y=log_returns))
Sigma = sd(asset_data$log_returns)*sqrt(252)
stock_tree = function(S, sigma, dt, N) {#
tree = matrix(0, nrow=N+1, ncol=N+1)#
u = exp(sigma*sqrt(dt))#
d = exp(-sigma*sqrt(dt))#
for (i in 1:(N+1)) {#
for (j in 1:i) {#
tree[i,j] = S * u^(j-1) * d^((i-1)-(j-1))#
}#
}#
return(tree)#
}
q_value = function(r, dt, sigma) {#
u = exp(sigma*sqrt(dt))#
d = exp(-sigma*sqrt(dt))#
return((exp(r*dt) - d)/(u-d))#
}
value_binomial_opt = function(tree, sigma, dt, r, K) {#
q = q_value(r, dt, sigma)#
option_tree = matrix(0, nrow=nrow(tree), ncol=ncol(tree))#
option_tree[nrow(option_tree),] = pmax(tree[nrow(tree),] - K, 0)#
for (i in (nrow(tree)-1):1) {#
for(j in 1:i) {#
option_tree[i, j] = ((1-q)*option_tree[i+1,j] + #
q*option_tree[i+1,j+1])/exp(r*dt)#
}#
}#
return(option_tree)#
}
binomial_option = function(sigma, T, r, X, S, N) #
{#
  q = q_value(r, dt=T/N, sigma=Sigma)#
tree = stock_tree(S=S, sigma=Sigma, dt=T/N, N=N)#
option = value_binomial_opt(tree, Sigma, dt, r=rf_rate, K)#
return(price=option[1,1])#
}
binomial_option(Sigma, maturity_in_days/252, rf_rate, K, S_0, 1)
T
rm(T)
q_value = function(r, dt, sigma) {#
#
print("q_value function r,dt,sigma")#
print(r)#
print(dt)#
print(sigma)#
#
u = exp(sigma*sqrt(dt))#
print("q_value function u")#
print(u)#
d = exp(-sigma*sqrt(dt))#
print("q_value function d")#
print(d)#
print("q_value function return")#
print((exp(r*dt) - d)/(u-d))#
#
return((exp(r*dt) - d)/(u-d))#
#
}
Sigma
q_value(rf_rate,90/252/5,Sigma)
stock_tree = function(S, sigma, dt, N) {#
#
tree = matrix(0, nrow=N+1, ncol=N+1)#
#
u = exp(sigma*sqrt(dt))#
#
d = exp(-sigma*sqrt(dt))#
#
for (i in 1:(N+1)) {#
#
for (j in 1:i) {#
#
tree[i,j] = S * u^(j-1) * d^((i-1)-(j-1))#
#
}#
#
}#
#
return(tree)#
#
}#
q_value = function(r, dt, sigma) {#
#
print("q_value function r,dt,sigma")#
print(r)#
print(dt)#
print(sigma)#
#
u = exp(sigma*sqrt(dt))#
print("q_value function u")#
print(u)#
d = exp(-sigma*sqrt(dt))#
print("q_value function d")#
print(d)#
print("q_value function return")#
print((exp(r*dt) - d)/(u-d))#
#
return((exp(r*dt) - d)/(u-d))#
#
}#
value_binomial_opt = function(tree, sigma, dt, r, K) {#
#
q = q_value(r, dt, sigma)#
#
option_tree = matrix(0, nrow=nrow(tree), ncol=ncol(tree))#
#
option_tree[nrow(option_tree),] = pmax(tree[nrow(tree),] - K, 0)#
#
for (i in (nrow(tree)-1):1) {#
#
for(j in 1:i) {#
#
option_tree[i, j] = ((1-q)*option_tree[i+1,j] + #
#
q*option_tree[i+1,j+1])/exp(r*dt)#
#
}#
#
}#
#
return(option_tree)#
#
}#
binomial_option = function(sigma, T, r, X, S, N) #
{#
  q = q_value(r, dt=T/N, sigma=Sigma)#
tree = stock_tree(S=S, sigma=Sigma, dt=T/N, N=N)#
option = value_binomial_opt(tree, Sigma, dt, r=rf_rate, K)#
return(price=option[1,1])#
}
binomial_option(Sigma, maturity_in_days/252, rf_rate, K, S_0, 1)
dt <- 90/252
binomial_option(Sigma, maturity_in_days/252, rf_rate, K, S_0, 1)
binomial_option(Sigma, maturity_in_days/252, rf_rate, K, S_0, 10)
system('man pdflatex')
system("echo $PATH")
Sys.getenv("PATH")
runif(1)
?runif
x_val=runif(25)
x_val
dot_data<-data.frame(x_val=runif(25),y_val=runif(25))
dot_data
sqrt(dot_data$x_val^2+dot_data$y_val^2)
dot_data
sqrt(dot_data$x_val^2+dot_data$y_val^2)
sqrt(dot_data$x_val^2+dot_data$y_val^2)<=1
?ifelse
x <- c(6:-4)
x
sqrt(x)
sqrt(ifelse(x >= 0, x, NA))
dot_data<-data.frame(x_val=runif(25),y_val=runif(25))#
#Define in with 1 and out with 0.#
#Since circle radius is 1. We calculate in/out with the distance from origin.#
dot_data$in_or_out<-ifelse(sqrt(dot_data$x_val^2+dot_data$y_val^2)<=1,1,0)#
head(dot_data)
library(ggplot2)
plot_pi <- ggplot() +#
geom_polygon(data=circle_data,aes(x=x_val,y=y_val),alpha=0.1) + theme_bw()#
plot_pi
circle_data<-data.frame(x_val=c(0,seq(0,1,length.out=1000)),#
                        y_val=c(0,sqrt(1-seq(0,1,length.out=1000)^2)))
plot_pi <- ggplot() +#
geom_polygon(data=circle_data,aes(x=x_val,y=y_val),alpha=0.1) + theme_bw()#
plot_pi
plot_pi + geom_point(data=dot_data,aes(x=x_val,y=y_val,color=in_or_out)) +#
theme(legend.position="none")
4*sum(dot_data$in_or_out)/nrow(dot_data)
toss_coins<-function(n_toss){#
    sample(c("H","T"),n_toss,replace=TRUE)#
}
toss_coins(5)
toss_coins(5)=="H"
sum(toss_coins(5)=="H")/5
sum(toss_coins(500)=="H")/500
sum(toss_coins(5000)=="H")/5000
sum(toss_coins(50000)=="H")/50000
n_trial<-10^4
n_trial
n_trial<-10
sample(c())
sample(c("A","B"),size=5,replace=TRUE)
sample(1:6,size=5,replace=TRUE)
sample(1:6,size=4,replace=TRUE)
die_toss<-matrix(sample(1:6,n_trial*4,replace=TRUE),ncol=4)
head(die_toss)
sample(1:6,size=4,replace=TRUE)
set.seed(123)
sample(1:6,size=4,replace=TRUE)
set.seed(123)
sample(1:6,size=4,replace=TRUE)
die_toss==6
die_toss
die_toss==4
die_toss>=4
die_toss!=4
die_toss
die_toss==6
die_toss[1,]
(die_toss==6)[1,]
sum((die_toss==6)[1,])
die_toss_tf<-die_toss==6
die_toss_tf
die_toss
rowSums(die_toss_tf)
n_trial<-10^2
die_toss<-matrix(sample(1:6,n_trial*4,replace=TRUE),ncol=4)#
head(die_toss)
rowSums(die_toss)
die_toss<-die_toss==6#
head(die_toss)
rowSums(die_toss)
rowSums(die_toss)>=1
wins<-rowSums(die_toss)>=1
sum(wins)/n_trial
n_trial
sum(wins)
n_trial<-10^4#
#Roll the dice#
#Each row is the result of 4 rolls#
die_toss<-matrix(sample(1:6,n_trial*4,replace=TRUE),ncol=4)#
head(die_toss)
die_toss<-die_toss==6#
head(die_toss)
wins<-rowSums(die_toss)>=1
wins
sum(wins)
sum(wins)/n_trial
sim_european_call<-function(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=10^4){#
    #Simulate the stock#
    sim_S_T<-S_0*exp((r-0.5*vol^2)*T_years + vol*rnorm(n)*sqrt(T))#
    #Calculate payoffs#
    payoffs<-pmax(sim_S_T-K,0)*exp(-r*T_years)#
    #Simulate results and bounds#
    Price<-mean(payoffs)#
    SE<-1.96*sd(payoffs)/sqrt(n)#
    LowerB <- Price - SE#
    UpperB <- Price + SE#
    return(c(Price=Price,SE=SE,Lower=LowerB,Upper=UpperB))#
}
sim_european_call(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=10^3)
sim_european_call(S_0=300,K=150,vol=0.25,T_years=1,r=0.02,n=10^3)
set.seed(431515)
rnoem(1)
rnorm(1)
set.seed(431515)
rnorm(1)
z1<-rnorm(100,mean=0.1,sd=0.1)#
z2<-rnorm(100,mean=0.5,sd=0.4)#
z3<-rnorm(100,mean=0.7,sd=0.5)
z_mat<-matrix(c(z1,z2,z3),ncol=3)
head(z_mat)
cov_mat<-cov(z_mat)#
cov_mat
chol_mat<-t(chol(cov_mat))
chol_mat
chol%*%t(chol_mat)
t_chol%*%t(chol_mat)
chol_mat%*%t(chol_mat)
unif_vec<-runif(10^4)
h_or_t<-ifelse(unif_vec<0.5,1,0)
head(h_or_t)
mc_process<-data.frame(instance_num=1,#
                        mu=mean(h_or_t[1]),#
                        upper=mean(h_or_t[1])+1.96*sd(h_or_t[1])/sqrt(1),#
                        lower=mean(h_or_t[1])-1.96*sd(h_or_t[1])/sqrt(1))#
for(i in 2:length(unif_vec)){#
    mc_process[i,]<-data.frame(instance_num=i,#
                            mu=mean(h_or_t[1:i]),#
                            upper=mean(h_or_t[1:i])+1.96*sd(h_or_t[1:i])/sqrt(i),#
                            lower=mean(h_or_t[1:i])-1.96*sd(h_or_t[1:i])/sqrt(i))#
#
}#
head(mc_process)
mc_process[100:110,]
ggplot(data=mc_process) + geom_line(aes(x=instance_num,y=mu)) +#
geom_line(aes(x=instance_num,y=lower),color="blue",linetype=2) +#
geom_line(aes(x=instance_num,y=upper),color="blue",linetype=2) +#
geom_hline(yintercept=0.5,color="red") + ylim(c(0,1)) + theme_bw()
mc_process[1000:1010,]
set.seed(522)#
bs_simul <- data.frame(instances=50,#
    t(sim_european_call(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=50)))#
for(i in 2:1000){#
    set.seed(522)#
    bs_simul <- rbind(bs_simul,#
    data.frame(instances=50*i,#
        t(sim_european_call(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=50*i))))#
}
bs_price<-#
black_scholes_eopt(s0=100,K=100,r=0.02,T_in_days=252,sig=0.25,callOrPut="call")#
bs_price
n<-1000 #number of instances#
#Naive calculation#
h_or_t_naive <- runif(n) < 0.3
mu=mean(h_or_t_naive)
SE=1.96*sd(h_or_t_naive)/sqrt(n)#
print(c(Mean=mu,SE=SE,Lower=mu-SE,Upper=mu+SE))
unif_vec<-runif(n/2)
x_1<- unif_vec < 0.3
x_2<- (1-unif_vec) < 0.3
h_or_t_av <- (x_1 + x_2)/2
mu=mean(h_or_t_av)
SE=1.96*sd(h_or_t_av)/sqrt(n/2)
print(c(Mean=mu,SE=SE,Lower=mu-SE,Upper=mu+SE))
#Let's build a function to simulate#
sim_european_call_av<-function(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=10^4){#
    z_1 <- rnorm(n/2)#
    z_2 <- -z_1#
    #Simulate the payoffs with both processes#
    sim_payoff_1<-exp(-r*T)*pmax(S_0*exp((r-0.5*vol^2)*T_years + vol*z_1*sqrt(T))-K,0)#
    sim_payoff_2<-exp(-r*T)*pmax(S_0*exp((r-0.5*vol^2)*T_years + vol*z_2*sqrt(T))-K,0)#
    sim_payoff <- (sim_payoff_1 + sim_payoff_2)/2#
    #Calculate results and bounds#
    Price<-mean(sim_payoff)#
    SE<-1.96*sd(sim_payoff)/sqrt(n/2)#
    LowerB <- Price - SE#
    UpperB <- Price + SE#
    return(c(Price=Price,SE=SE,Lower=LowerB,Upper=UpperB))#
}#
##Let's compare
sim_european_call(n=10^4)
library(tidyverse)
load("/Users/berkorbay/Dropbox/PhD_Workshop/Output Files/Clustering Chapter/SPX_2013_08_16_tr_6_pr_1_BS_data_withdiv_2y_APE.RData")
ls()
error_data
options(dplyr.width=Inf)
error_data
library(ggplot2)
n<-1000 #number of instances#
#Naive calculation#
h_or_t_naive <- runif(n) < 0.3#
mu=mean(h_or_t_naive)#
SE=1.96*sd(h_or_t_naive)/sqrt(n)
print(c(Mean=mu,SE=SE,Lower=mu-SE,Upper=mu+SE))
#Antithetic variates#
unif_vec<-runif(n/2)
#Normal process#
x_1<- unif_vec < 0.3
x_2<- (1-unif_vec) < 0.3
h_or_t_av <- (x_1 + x_2)/2
mu=mean(h_or_t_av)#
SE=1.96*sd(h_or_t_av)/sqrt(n/2)#
print(c(Mean=mu,SE=SE,Lower=mu-SE,Upper=mu+SE))
sim_european_call_av<-function(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=10^4){#
    z_1 <- rnorm(n/2)#
    z_2 <- -z_1#
    #Simulate the payoffs with both processes#
    sim_payoff_1<-exp(-r*T)*pmax(S_0*exp((r-0.5*vol^2)*T_years + vol*z_1*sqrt(T))-K,0)#
    sim_payoff_2<-exp(-r*T)*pmax(S_0*exp((r-0.5*vol^2)*T_years + vol*z_2*sqrt(T))-K,0)#
    sim_payoff <- (sim_payoff_1 + sim_payoff_2)/2#
    #Calculate results and bounds#
    Price<-mean(sim_payoff)#
    SE<-1.96*sd(sim_payoff)/sqrt(n/2)#
    LowerB <- Price - SE#
    UpperB <- Price + SE#
    return(c(Price=Price,SE=SE,Lower=LowerB,Upper=UpperB))#
}
sim_european_call(n=10^4)
sim_european_call<-function(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=10^4){#
    #Simulate the stock#
    sim_S_T<-S_0*exp((r-0.5*vol^2)*T_years + vol*rnorm(n)*sqrt(T))#
    #Calculate payoffs#
    payoffs<-pmax(sim_S_T-K,0)*exp(-r*T_years)#
    #Simulate results and bounds#
    Price<-mean(payoffs)#
    SE<-1.96*sd(payoffs)/sqrt(n)#
    LowerB <- Price - SE#
    UpperB <- Price + SE#
    return(c(Price=Price,SE=SE,Lower=LowerB,Upper=UpperB))#
}
sim_european_call(n=10^4)
sim_european_call_av(n=10^4)
sim_european_call_cv<-function(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,n=10^4,with_naive=TRUE){#
    #Simulate S_T values#
    S_T_est <-S_0*exp((r-0.5*vol^2)*T_years + vol*rnorm(n)*sqrt(T))#
    #Simulate the payoffs with both processes#
    sim_payoff<-exp(-r*T)*pmax(S_T_est-K,0)#
    #Calculate theta_star#
    theta_star<-cov(S_T_est,sim_payoff)/var(S_T_est)#
    #Calculate CV effect#
    payoff_cv <- sim_payoff - theta_star*(S_T_est - S_0*exp(r*T_years))#
    #Calculate the output of naive simulation as well#
    if(with_naive){#
        Price<-mean(sim_payoff)#
        SE<-1.96*sd(sim_payoff)/sqrt(n)#
        LowerB <- Price - SE#
        UpperB <- Price + SE#
        print(c(Price_naive=Price,SE_naive=SE,Lower=LowerB,Upper=UpperB))#
    }#
    Price<-mean(payoff_cv)#
    SE<-1.96*sd(payoff_cv)/sqrt(n)#
    LowerB <- Price - SE#
    UpperB <- Price + SE#
    return(c(Price_CV=Price,SE_CV=SE,Lower=LowerB,Upper=UpperB))#
}
sim_european_call_cv()
asian_option_MC<-function(s0=100,K=100,r=0.02,t_i=c(15,30,45,60),#
                            vol=0.2,callOrPut="call",n=10^5){#
    #Assume the last element of t_i is maturity#
    t_i<-t_i/252 #Annualize time periods#
    sT<-s0*exp((r-vol^2/2)*t_i[1] + vol*sqrt(t_i[1])*rnorm(n))#
    sum_sT<-sT#
    for(i in 2:length(t_i)){#
        dt<-t_i[i]-t_i[i-1]#
        sT<-sT*exp((r-vol^2/2)*dt + vol*sqrt(dt)*rnorm(n))#
        sum_sT<-sum_sT + sT#
    }#
    if(callOrPut=="call"){#
        price <- pmax(sum_sT/length(t_i) - K,0)*exp(-r*t_i[length(t_i)])#
    }else{#
        price <- pmax(K - sum_sT/length(t_i),0)*exp(-r*t_i[length(t_i)])#
    }#
#
    mean_price<-mean(price)#
    SE_price <- 1.96*sd(price)/sqrt(n)#
    lower_price <- mean_price - SE_price#
    upper_price <- mean_price + SE_price#
    return(c(Price=mean_price,SE=SE_price,Lower=lower_price,Upper=upper_price))#
}
asian_option_MC()
asian_option_MC_cvST<-function(s0=100,K=100,r=0.02,t_i=c(15,30,45,60),#
                            vol=0.2,callOrPut="call",n=10^5){#
    #Assume the last element of t_i is maturity#
    t_i<-t_i/252 #Annualize time periods#
    sT<-s0*exp((r-vol^2/2)*t_i[1] + vol*sqrt(t_i[1])*rnorm(n))#
    sum_sT<-sT#
    for(i in 2:length(t_i)){#
        dt<-t_i[i]-t_i[i-1]#
        sT<-sT*exp((r-vol^2/2)*dt + vol*sqrt(dt)*rnorm(n))#
        sum_sT<-sum_sT + sT#
    }#
    if(callOrPut=="call"){#
        price <- pmax(sum_sT/length(t_i) - K,0)*exp(-r*t_i[length(t_i)])#
    }else{#
        price <- pmax(K - sum_sT/length(t_i),0)*exp(-r*t_i[length(t_i)])#
    }#
#
    theta_star <- cov(price,sT)/var(sT)#
    #E[sT] = s0*exp(r*T)#
    price_cv <- price - theta_star*(sT - s0*exp(r*t_i[length(t_i)]))#
#
    mean_price<-mean(price_cv)#
    SE_price <- 1.96*sd(price_cv)/sqrt(n)#
    lower_price <- mean_price - SE_price#
    upper_price <- mean_price + SE_price#
    return(c(Price=mean_price,SE=SE_price,Lower=lower_price,Upper=upper_price))#
}#
asian_option_MC_cvST()
asian_option_MC()
asian_option_MC_cvEOPT<-function(s0=100,K=100,r=0.02,t_i=c(15,30,45,60),#
                            vol=0.2,callOrPut="call",n=10^5){#
    #Assume the last element of t_i is maturity#
    t_i<-t_i/252 #Annualize time periods#
    sT<-s0*exp((r-vol^2/2)*t_i[1] + vol*sqrt(t_i[1])*rnorm(n))#
    sum_sT<-sT#
    for(i in 2:length(t_i)){#
        dt<-t_i[i]-t_i[i-1]#
        sT<-sT*exp((r-vol^2/2)*dt + vol*sqrt(dt)*rnorm(n))#
        sum_sT<-sum_sT + sT#
    }#
    if(callOrPut=="call"){#
        price <- pmax(sum_sT/length(t_i) - K,0)*exp(-r*t_i[length(t_i)])#
        #Calculate CV with European Call#
        price_eopt <- pmax(sT - K,0)*exp(-r*t_i[length(t_i)])#
        #Calculate BS price as E[price_eopt]#
        price_bs<-black_scholes_eopt(s0=s0,K=K,r=r,T_in_days=t_i[length(t_i)]*252,sig=vol,callOrPut="call")#
    }else{#
        price <- pmax(K - sum_sT/length(t_i),0)*exp(-r*t_i[length(t_i)])#
        #Calculate CV with European Put#
        price_eopt <- pmax(K - sT,0)*exp(-r*t_i[length(t_i)])#
        #Calculate BS price as E[price_eopt]#
        price_bs<-black_scholes_eopt(s0=s0,K=K,r=r,T_in_days=t_i[length(t_i)]*252,sig=vol,callOrPut="put")#
    }#
#
    theta_star <- cov(price,price_eopt)/var(price_eopt)#
    #E[sT] = s0*exp(r*T)#
    price_cv <- price - theta_star*(price_eopt - price_bs)#
#
    mean_price<-mean(price_cv)#
    SE_price <- 1.96*sd(price_cv)/sqrt(n)#
    lower_price <- mean_price - SE_price#
    upper_price <- mean_price + SE_price#
    return(c(Price=mean_price,SE=SE_price,Lower=lower_price,Upper=upper_price))#
}#
asian_option_MC_cvEOPT()
black_scholes_eopt<-function(s0,K,r,T_in_days,sig,callOrPut="call"){#
	T <- max(T_in_days/252,1/252)#
	d1<- (log(s0/K) + (r + sig^2/2)*T)/(sig*sqrt(T))#
	d2<- d1 - sig*sqrt(T)#
	if(callOrPut=="call"){#
		BS_price <- s0*pnorm(d1) - K*exp(-r*T)*pnorm(d2)#
	}else{#
		BS_price <- K*exp(-r*T)*pnorm(-d2) - s0*pnorm(-d1)#
	}#
	return(BS_price)#
}
asian_option_MC_cvEOPT<-function(s0=100,K=100,r=0.02,t_i=c(15,30,45,60),#
                            vol=0.2,callOrPut="call",n=10^5){#
    #Assume the last element of t_i is maturity#
    t_i<-t_i/252 #Annualize time periods#
    sT<-s0*exp((r-vol^2/2)*t_i[1] + vol*sqrt(t_i[1])*rnorm(n))#
    sum_sT<-sT#
    for(i in 2:length(t_i)){#
        dt<-t_i[i]-t_i[i-1]#
        sT<-sT*exp((r-vol^2/2)*dt + vol*sqrt(dt)*rnorm(n))#
        sum_sT<-sum_sT + sT#
    }#
    if(callOrPut=="call"){#
        price <- pmax(sum_sT/length(t_i) - K,0)*exp(-r*t_i[length(t_i)])#
        #Calculate CV with European Call#
        price_eopt <- pmax(sT - K,0)*exp(-r*t_i[length(t_i)])#
        #Calculate BS price as E[price_eopt]#
        price_bs<-black_scholes_eopt(s0=s0,K=K,r=r,T_in_days=t_i[length(t_i)]*252,sig=vol,callOrPut="call")#
    }else{#
        price <- pmax(K - sum_sT/length(t_i),0)*exp(-r*t_i[length(t_i)])#
        #Calculate CV with European Put#
        price_eopt <- pmax(K - sT,0)*exp(-r*t_i[length(t_i)])#
        #Calculate BS price as E[price_eopt]#
        price_bs<-black_scholes_eopt(s0=s0,K=K,r=r,T_in_days=t_i[length(t_i)]*252,sig=vol,callOrPut="put")#
    }#
#
    theta_star <- cov(price,price_eopt)/var(price_eopt)#
    #E[sT] = s0*exp(r*T)#
    price_cv <- price - theta_star*(price_eopt - price_bs)#
#
    mean_price<-mean(price_cv)#
    SE_price <- 1.96*sd(price_cv)/sqrt(n)#
    lower_price <- mean_price - SE_price#
    upper_price <- mean_price + SE_price#
    return(c(Price=mean_price,SE=SE_price,Lower=lower_price,Upper=upper_price))#
}#
asian_option_MC_cvEOPT()
asian_option_MC()
asian_option_MC_cvST()
GABS_EOPT<-function(S_0=100,K=100,vol=0.2,#
                    t_i=c(15,30,45,60),r=0.02,callOrPut="call"){#
    #Geometric Asian Black Scholes Function#
    M <- length(t_i)#
    dt <- (t_i[-1] - t_i[-M])/252#
    mu_barS <- log(S_0) + (r - vol^2/2)/M*sum((M:1)*dt)#
    sigma_barS <- vol/M*sqrt(sum((M:1)^2*dt))#
#
    if(callOrPut=="call"){#
        Price <- exp(-r*T)*(exp(mu_barS+sigma_barS^2/2)*#
                 pnorm((mu_barS+sigma_barS^2 - log(K))/sigma_barS) -#
                 K*pnorm((mu_barS - log(K))/sigma_barS))#
    }else{#
        print("Soon")#
    }#
#
}
GABS_EOPT()
GABS_EOPT<-function(S_0=100,K=100,vol=0.2,#
                    t_i=c(15,30,45,60),r=0.02,callOrPut="call"){#
    #Geometric Asian Black Scholes Function#
    M <- length(t_i)#
    dt <- (t_i[-1] - t_i[-M])/252#
    mu_barS <- log(S_0) + (r - vol^2/2)/M*sum((M:1)*dt)#
    sigma_barS <- vol/M*sqrt(sum((M:1)^2*dt))#
#
    if(callOrPut=="call"){#
        Price <- exp(-r*T)*(exp(mu_barS+sigma_barS^2/2)*#
                 pnorm((mu_barS+sigma_barS^2 - log(K))/sigma_barS) -#
                 K*pnorm((mu_barS - log(K))/sigma_barS))#
    }else{#
        print("Soon")#
    }#
#
}
GABS_EOPT<-function(S_0=100,K=100,vol=0.2,#
                    t_i=c(15,30,45,60),r=0.02,callOrPut="call"){#
    #Geometric Asian Black Scholes Function#
    M <- length(t_i)#
    dt <- (t_i[-1] - t_i[-M])/252#
    mu_barS <- log(S_0) + (r - vol^2/2)/M*sum((M:1)*dt)#
    sigma_barS <- vol/M*sqrt(sum((M:1)^2*dt))#
#
    if(callOrPut=="call"){#
        Price <- exp(-r*T)*(exp(mu_barS+sigma_barS^2/2)*#
                 pnorm((mu_barS+sigma_barS^2 - log(K))/sigma_barS) -#
                 K*pnorm((mu_barS - log(K))/sigma_barS))#
    }else{#
        print("Soon")#
    }#
    return(Price)#
#
}
GABS_EOPT()
#Same EC function that returns payoff vector#
payoff_EC<-function(S_0=100,K=100,vol=0.25,T_years=1,r=0.02,z_val){#
    return(pmax(S_0*exp((r-0.5*vol^2)*T_years + vol*z_val*sqrt(T))-K,0)*exp(-r*T_years))#
}
n<-10^4 #Number of instances
payoff_1<-payoff_EC(r=0.01,z_val=rnorm(n))
payoff_2<-payoff_EC(r=0.06,z_val=rnorm(n))
mean(payoff_1)
mean(payoff_2)
diff_vec<-payoff_1 - payoff_2
mu_diff<-mean(diff_vec)#
SE=1.96*sd(diff_vec)/sqrt(n)#
print(c(Diff=mu_diff,SE=SE,Lower=mu_diff-SE,Upper=mu_diff+SE))
z_val<-rnorm(n)
payoff_1<-payoff_EC(r=0.01,z_val=z_val)#
payoff_2<-payoff_EC(r=0.06,z_val=z_val)
diff_vec<-payoff_1 - payoff_2#
mu_diff<-mean(diff_vec)#
SE=1.96*sd(diff_vec)/sqrt(n)#
print(c(Diff=mu_diff,SE=SE,Lower=mu_diff-SE,Upper=mu_diff+SE))
lossrealization<-function (n,PD,EAD,LGD,rho){#
    # Keep track of the loss in this portfolio .#
    totalloss <- 0#
    # Draw a normal random variable for the # systematic factor .#
    sf <- rnorm(1)#
    # Loop through all obligors to see if they # go into default .#
    for(obligor in 1:n){#
        # Draw specific factor .#
        of <- rnorm(1)#
        # Asset value for this obligor .#
        x <- sqrt(rho)*sf + sqrt(1-rho)*of#
        # Critical threshold for this obligor .#
        c <- qnorm(PD[obligor])#
        # check for default .#
        if(x < c){#
            totalloss <- totalloss + EAD[obligor] * LGD[obligor];#
        }#
    }#
    return(totalloss)#
}
n <- 100 # The number of obligors in the portfolio.#
runs <- 5000 # Number of realizations.#
# Run a number of realizations .#
EAD <- rep (1,n)#
LGD <- rep (1,n)#
PD <- rep (0.25,n)#
rho <- 0.2#
losses <- c()
for(run in 1:runs){#
    # Add a new realiza/on of the loss variable .#
    losses <- c(losses,lossrealization(n,PD,EAD,LGD,rho))#
}
head(losses)
hist(losses, freq =FALSE , main =" Histogram of Loss ", xlab =" Loss ", ylab =" Density ");
alpha <- 0.95 # Alpha level
losses <- sort(losses)
j <- floor(alpha*runs)
j
var_value <- losses[j]
var_value
largelosses <- losses[losses >= var_value]#
# Output TCE#
ES <- mean (largelosses)
ES
quantile(losses,0.95)
quantile(losses,0.99)
mean(losses[losses >= quantile(losses,0.99)]
)
get_IV<-function(s0=100,K=100,r=0.02,T_in_days=252,Price=10.87,callOrPut="call"){#
#
    f <- function(vol,s0,K,r,T_in_days,Price,callOrPut){#
        black_scholes_eopt(s0=s0,K=K,r=r,T_in_days=T_in_days,sig=vol,callOrPut=callOrPut)-Price#
    }#
#
    uniroot(f,lower=0,upper=1,s0=s0,K=K,r=r,T_in_days=T_in_days,callOrPut=callOrPut,Price=Price)$root#
}
get_IV()
load("~/Documents/sp_data.RData")
head(sp_data)
load("/Users/berkorbay/Dropbox/Post_PhD/Kernel/input_files/option_data/SPX/SPX_2013_options_filtered_D12.RData")
ls()
head(processed_data)
sp_cs<-sp_data[sp_data$DataDate=="2013-06-21" & sp_data$T_in_days == 127,]
sp_cs
library(tidyverse)
spp<-processed_data %>% filter(DataDate=="2013-06-21")
spp<-processed_data %>% filter(DataDate=="2013-06-21" & Maturity_Trading==127 & Type=="put")
spp
ggplot(spp) + geom_line(aes(x=Strike,y=IV))
spp<-processed_data %>% filter(DataDate=="2013-05-21" & Maturity_Trading==127 & Type=="put")
spp
spp<-processed_data %>% filter(DataDate=="2013-05-22" & Maturity_Trading==127 & Type=="put")
spp
spp<-processed_data %>% filter(DataDate=="2013-05-22" & Type=="put")
spp
spp<-processed_data %>% filter(DataDate=="2013-05-22" & Maturity_Calendar==30 & Type=="put")
ggplot(spp) + geom_line(aes(x=Strike,y=IV))
spp
spp %>% filter(Strike => 1655)
spp %>% filter(Strike >= 1655)
spp %>% filter(Strike >= 1655 & Last < 100)
spp %>% filter(Strike >= 1655 & Last < 100) %>% select(DataDate, Strike)
spp %>% filter(Strike >= 1655 & Last < 100) %>% select(DataDate, Strike,UnderlyingPrice)
spp %>% filter(Strike >= 1655 & Last < 100) %>% select(DataDate, Strike,UnderlyingPrice) %>% mutate(Moneyness = Underlying/Strike)
spp %>% filter(Strike >= 1655 & Last < 100) %>% select(DataDate, Strike,UnderlyingPrice) %>% mutate(Moneyness = UnderlyingPrice/Strike)
spp %>% filter(Strike >= 1655 & Last < 100) %>% select(DataDate, Strike,UnderlyingPrice) %>% transmute(Moneyness = UnderlyingPrice/Strike)
spp %>% group_by(Strike) %>% summarise(count=n(),mean_price=mean(Last))
spp %>% group_by(Strike) %>% summarise(count=n(),mean_price=sd(Last))
spp %>% group_by(Strike) %>% summarise(count=n(),mean_price=max(Last))
spp %>% group_by(Strike) %>% summarise(count=n(),mean_price=mean(Last)) %>% ungroup %>% arrange(desc(mean_price))
?wilcox.test
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)#
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)#
wilcox.test(x, y, paired = TRUE, alternative = "greater")
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)#
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)#
wilcox.test(x, y, paired = TRUE, alternative = "two.sided")
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)#
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)#
wilcox.test(x, y, paired = TRUE, alternative = "two.sided",conf.int=TRUE)
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)#
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)#
wilcox.test(x, y, paired = FALSE, alternative = "two.sided",conf.int=TRUE)
setwd("/Users/berkorbay/git_repositories/secimler")#
#
#devtools::setup()#
###Data Manipulation#
options(dplyr.width=Inf)#
library(tidyverse)#
#
#Kasim 1 secim151101g#
secim151101g<-readxl::read_excel("/Users/berkorbay/Dropbox/R/secimler_package/secim_data/1kasim_duzeltilme_wip.xlsx") %>% tbl_df()
secim151101g %>% group_by(il,ilce,cevre) %>% summarise(count=dplyr::n()) %>% ungroup %>% arrange(desc(count))
secim151101g %>% group_by(il,ilce,cevre) %>% summarise(count=n())
secim151101g %>% group_by(il,ilce,cevre) %>% summarise(count=n()) %>% ungroup() %>% arrange(desc(count))
secim151101g %>% group_by(il,ilce) %>% distinct(cevre,.keep_all=TRUE) %>% summarise(count=n()) %>% ungroup() %>% arrange(desc(count))
secim151101g %>% filter(il=="Çorum", ilce=="Çorum Merkez") %>% distinct(cevre)
secim151101g
secim151101g %>% filter(il=="Çorum", ilce=="Çorum Merkez") %>% distinct(cevre_turu)
ggplot(data= il_katilim) +#
geom_histogram(aes(x=katilim_orani,fill=ilce),color="white",size=0.1,binwidth=0.005) +#
geom_vline(aes(xintercept=median(katilim_orani)),color="purple")
il_katilim<-#
secim151101g %>%#
filter(grepl("İstanbul-1",il) & !(cevre_turu %in% c("Cezaevi","Toplam"))) %>% mutate(katilim_orani=oy_kullanan/kayitli_secmen)#
#
#Bazi yerlerde katilim kayitli secmenden fazla#
ggplot(data= il_katilim) +#
geom_histogram(aes(x=katilim_orani,fill=ilce),color="white",size=0.1,binwidth=0.005) +#
geom_vline(aes(xintercept=median(katilim_orani)),color="purple")
devtools::use_data(secim151101g,pkg="secimler",overwrite=TRUE)
devtools::use_data(secim151101g,pkg=".",overwrite=TRUE)
devtools::use_package("tidyverse","Depends",pkg=".")
devtools::install()
library(secimler)
